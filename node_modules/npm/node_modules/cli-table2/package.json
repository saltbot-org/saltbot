{
  "_from": "cli-table2",
  "_id": "cli-table2@0.2.0",
  "_inBundle": false,
  "_integrity": "sha1-LR738hig54biFFQFYtS9F3/jLZc=",
  "_location": "/npm/cli-table2",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "cli-table2",
    "fetchSpec": "latest",
    "name": "cli-table2",
    "raw": "cli-table2",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/npm"
  ],
  "_resolved": "https://registry.npmjs.org/cli-table2/-/cli-table2-0.2.0.tgz",
  "_shasum": "2d1ef7f218a0e786e214540562d4bd177fe32d97",
  "_shrinkwrap": null,
  "_spec": "cli-table2",
  "_where": "/Users/rebecca/code/npm",
  "author": {
    "name": "James Talmage"
  },
  "bugs": {
    "url": "https://github.com/jamestalmage/cli-table2/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "colors": "^1.1.2",
    "lodash": "^3.10.1",
    "string-width": "^1.0.1"
  },
  "deprecated": false,
  "description": "Pretty unicode tables for the command line. Based on the original cli-table.",
  "devDependencies": {
    "ansi-256-colors": "^1.1.0",
    "chai": "^3.4.1",
    "cli-table": "^0.3.1",
    "coveralls": "^2.11.4",
    "git-rev": "^0.2.1",
    "growl": "^1.8.1",
    "gulp": "^3.9.0",
    "gulp-istanbul": "^0.10.3",
    "gulp-mocha": "^2.2.0",
    "gulp-util": "^3.0.7",
    "sinon": "^1.17.2",
    "sinon-chai": "^2.8.0"
  },
  "directories": {
    "test": "test"
  },
  "homepage": "https://github.com/jamestalmage/cli-table2",
  "keywords": [
    "cli",
    "colors",
    "command",
    "grid",
    "line",
    "node",
    "table",
    "tables",
    "tabular",
    "unicode"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "cli-table2",
  "optionalDependencies": {
    "colors": "^1.1.2"
  },
  "readme": "CLI Table 2 [![npm version](https://badge.fury.io/js/cli-table2.svg)](http://badge.fury.io/js/cli-table2) [![Build Status](https://travis-ci.org/jamestalmage/cli-table2.svg?branch=master)](https://travis-ci.org/jamestalmage/cli-table2) [![Coverage Status](https://coveralls.io/repos/jamestalmage/cli-table2/badge.png?branch=master)](https://coveralls.io/r/jamestalmage/cli-table2?branch=master)\n===========\n\nThis utility allows you to render unicode-aided tables on the command line from\nyour node.js scripts. Based on (and api compatible with) the original [cli-table](https://github.com/Automattic/cli-table),\n`cli-table2` is nearly a complete rewrite to accommodate column and row spanning.\nIt passes the entire original cli-table test suite, and should be a drop in\nreplacement for nearly all users.\n\n![Screenshot](http://i.imgur.com/sYq4T.png)\n\n## Features not in the original cli-table\n\n- Ability to make cells span columns and/or rows.\n- Ability to set custom styles per cell (border characters/colors, padding, etc).\n- Vertical alignment (top, bottom, center).\n- Automatic word wrapping.\n- More robust truncation of cell text that contains ansi color characters.\n- Better handling of text color that spans multiple lines.\n- API compatible with the original cli-table.\n- Exhaustive test suite including the entire original cli-table test suite.\n- Lots of examples auto-generated from the tests ([basic](https://github.com/jamestalmage/cli-table2/blob/master/basic-usage.md), [advanced](https://github.com/jamestalmage/cli-table2/blob/master/advanced-usage.md)).\n\n## Features\n\n- Customizable characters that constitute the table.\n- Color/background styling in the header through\n  [colors.js](http://github.com/marak/colors.js)\n- Column width customization\n- Text truncation based on predefined widths\n- Text alignment (left, right, center)\n- Padding (left, right)\n- Easy-to-use API\n\n## Installation\n\n```bash\nnpm install cli-table2\n```\n\n## How to use\n\nA portion of the unit test suite is used to generate examples:\n- [basic-usage](https://github.com/jamestalmage/cli-table2/blob/master/basic-usage.md) - covers basic uses.\n- [advanced](https://github.com/jamestalmage/cli-table2/blob/master/advanced-usage.md) - covers using the new column and row span features.\n\nThis package is api compatible with the original [cli-table](https://github.com/Automattic/cli-table).\nSo all the original documentation still applies (copied below).\n\n### Horizontal Tables\n```javascript\nvar Table = require('cli-table2');\n\n// instantiate\nvar table = new Table({\n    head: ['TH 1 label', 'TH 2 label']\n  , colWidths: [100, 200]\n});\n\n// table is an Array, so you can `push`, `unshift`, `splice` and friends\ntable.push(\n    ['First value', 'Second value']\n  , ['First value', 'Second value']\n);\n\nconsole.log(table.toString());\n```\n\n### Vertical Tables\n```javascript\nvar Table = require('cli-table2');\nvar table = new Table();\n\ntable.push(\n    { 'Some key': 'Some value' }\n  , { 'Another key': 'Another value' }\n);\n\nconsole.log(table.toString());\n```\n### Cross Tables\nCross tables are very similar to vertical tables, with two key differences:\n\n1. They require a `head` setting when instantiated that has an empty string as the first header\n2. The individual rows take the general form of { \"Header\": [\"Row\", \"Values\"] }\n\n```javascript\nvar Table = require('cli-table2');\nvar table = new Table({ head: [\"\", \"Top Header 1\", \"Top Header 2\"] });\n\ntable.push(\n    { 'Left Header 1': ['Value Row 1 Col 1', 'Value Row 1 Col 2'] }\n  , { 'Left Header 2': ['Value Row 2 Col 1', 'Value Row 2 Col 2'] }\n);\n\nconsole.log(table.toString());\n```\n\n### Custom styles\nThe ```chars``` property controls how the table is drawn:\n```javascript\nvar table = new Table({\n  chars: { 'top': '═' , 'top-mid': '╤' , 'top-left': '╔' , 'top-right': '╗'\n         , 'bottom': '═' , 'bottom-mid': '╧' , 'bottom-left': '╚' , 'bottom-right': '╝'\n         , 'left': '║' , 'left-mid': '╟' , 'mid': '─' , 'mid-mid': '┼'\n         , 'right': '║' , 'right-mid': '╢' , 'middle': '│' }\n});\n\ntable.push(\n    ['foo', 'bar', 'baz']\n  , ['frob', 'bar', 'quuz']\n);\n\nconsole.log(table.toString());\n// Outputs:\n//\n//╔══════╤═════╤══════╗\n//║ foo  │ bar │ baz  ║\n//╟──────┼─────┼──────╢\n//║ frob │ bar │ quuz ║\n//╚══════╧═════╧══════╝\n```\n\nEmpty decoration lines will be skipped, to avoid vertical separator rows just\nset the 'mid', 'left-mid', 'mid-mid', 'right-mid' to the empty string:\n```javascript\nvar table = new Table({ chars: {'mid': '', 'left-mid': '', 'mid-mid': '', 'right-mid': ''} });\ntable.push(\n    ['foo', 'bar', 'baz']\n  , ['frobnicate', 'bar', 'quuz']\n);\n\nconsole.log(table.toString());\n// Outputs: (note the lack of the horizontal line between rows)\n//┌────────────┬─────┬──────┐\n//│ foo        │ bar │ baz  │\n//│ frobnicate │ bar │ quuz │\n//└────────────┴─────┴──────┘\n```\n\nBy setting all chars to empty with the exception of 'middle' being set to a\nsingle space and by setting padding to zero, it's possible to get the most\ncompact layout with no decorations:\n```javascript\nvar table = new Table({\n  chars: { 'top': '' , 'top-mid': '' , 'top-left': '' , 'top-right': ''\n         , 'bottom': '' , 'bottom-mid': '' , 'bottom-left': '' , 'bottom-right': ''\n         , 'left': '' , 'left-mid': '' , 'mid': '' , 'mid-mid': ''\n         , 'right': '' , 'right-mid': '' , 'middle': ' ' },\n  style: { 'padding-left': 0, 'padding-right': 0 }\n});\n\ntable.push(\n    ['foo', 'bar', 'baz']\n  , ['frobnicate', 'bar', 'quuz']\n);\n\nconsole.log(table.toString());\n// Outputs:\n//foo        bar baz\n//frobnicate bar quuz\n```\n\n## Build Targets\n\nClone the repository and run `npm install` to install all its submodules, then run one of the following commands:\n\n###### Run the tests with coverage reports.\n```bash\n$ gulp coverage\n```\n\n###### Run the tests every time a file changes.\n```bash\n$ gulp watch-test\n```\n\n###### Run the examples and print the output to the command line.\n```bash\n$ gulp example\n```\n\nOther build targets are available, check `gulpfile.js` for a comprehensive list.\n\n## Credits\n\n- James Talmage - author &lt;james.talmage@jrtechnical.com&gt; ([jamestalmage](http://github.com/jamestalmage))\n- Guillermo Rauch - author of the original cli-table &lt;guillermo@learnboost.com&gt; ([Guille](http://github.com/guille))\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2014 James Talmage &lt;james.talmage@jrtechnical.com&gt;\n\nOriginal cli-table code/documentation: Copyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jamestalmage/cli-table2.git"
  },
  "scripts": {
    "test": "gulp coverage"
  },
  "version": "0.2.0"
}

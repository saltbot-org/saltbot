{
  "_from": "npm-profile@3.0.1",
  "_id": "npm-profile@3.0.1",
  "_inBundle": false,
  "_integrity": "sha512-U/jvnERvBRYgIdHkPURsa8mjLCOiImdA8fw1FzzCF//PKro4w1QANCmXiQex8f/Id1h939lqOiUT+ywKL0AG4Q==",
  "_location": "/npm/npm-profile",
  "_phantomChildren": {
    "cacache": "10.0.4",
    "inherits": "2.0.3",
    "lru-cache": "4.1.1",
    "once": "1.4.0",
    "readable-stream": "2.3.5",
    "retry": "0.10.1",
    "safe-buffer": "5.1.1",
    "ssri": "5.2.4"
  },
  "_requested": {
    "escapedName": "npm-profile",
    "fetchSpec": "3.0.1",
    "name": "npm-profile",
    "raw": "npm-profile@3.0.1",
    "rawSpec": "3.0.1",
    "registry": true,
    "saveSpec": null,
    "type": "version"
  },
  "_requiredBy": [
    "#USER",
    "/npm"
  ],
  "_resolved": "https://registry.npmjs.org/npm-profile/-/npm-profile-3.0.1.tgz",
  "_shasum": "65a1018340f14399a086b5d0a9bd0d13145d8e57",
  "_shrinkwrap": null,
  "_spec": "npm-profile@3.0.1",
  "_where": "/Users/rebecca/code/npm",
  "author": {
    "email": "me@re-becca.org",
    "name": "Rebecca Turner",
    "url": "http://re-becca.org/"
  },
  "bugs": {
    "url": "https://github.com/npm/npm-profile/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "aproba": "^1.1.2",
    "make-fetch-happen": "^2.5.0"
  },
  "deprecated": false,
  "description": "Library for updating an npmjs.com profile",
  "devDependencies": {},
  "files": [
    "CHANGELOG.md",
    "index.js"
  ],
  "homepage": "https://github.com/npm/npm-profile/tree/latest/lib#readme",
  "keywords": [],
  "license": "ISC",
  "main": "index.js",
  "name": "npm-profile",
  "optionalDependencies": {},
  "readme": "# npm-profile\n\nProvides functions for fetching and updating an npmjs.com profile.\n\n```js\nconst profile = require('npm-profile')\nprofile.get(registry, {token}).then(result => {\n   // …\n})\n```\n\nThe API that this implements is documented here:\n\n* [authentication](https://github.com/npm/registry/blob/master/docs/user/authentication.md)\n* [profile editing](https://github.com/npm/registry/blob/master/docs/user/profile.md) (and two-factor authentication)\n\n## Functions\n\n### profile.adduser(opener, prompter, config) → Promise\n\nTries to create a user new web based login, if that fails it falls back to\nusing the legacy CouchDB APIs.\n\n* `opener` Function (url) → Promise, returns a promise that resolves after a browser has been opened for the user at `url`.\n* `prompter` Function (creds) → Promise, returns a promise that resolves to an object with `username`, `email` and `password` properties.\n* `config` Object\n  * `creds` Object, passed through to prompter, common values are:\n    * `username` String, default value for username\n    * `email` String, default value for email\n  * `registry` String (for reference, the npm registry is `https://registry.npmjs.org`)\n  * `opts` Object, [make-fetch-happen options](https://www.npmjs.com/package/make-fetch-happen#extra-options) for setting\n    things like cache, proxy, SSL CA and retry rules.\n\n#### **Promise Value**\n\nAn object with the following properties:\n\n* `token` String, to be used to authenticate further API calls\n* `username` String, the username the user authenticated as\n\n#### **Promise Rejection**\n\nAn error object indicating what went wrong.\n\nThe `headers` property will contain the HTTP headers of the response.\n\nIf the action was denied because it came from an IP address that this action\non this account isn't allowed from then the `code` will be set to `EAUTHIP`.\n\nOtherwise the code will be `'E'` followed by the HTTP response code, for\nexample a Forbidden response would be `E403`.\n\n### profile.login(opener, prompter, config) → Promise\n\nTries to login using new web based login, if that fails it falls back to\nusing the legacy CouchDB APIs.\n\n* `opener` Function (url) → Promise, returns a promise that resolves after a browser has been opened for the user at `url`.\n* `prompter` Function (creds) → Promise, returns a promise that resolves to an object with `username`, and `password` properties.\n* `config` Object\n  * `creds` Object, passed through to prompter, common values are:\n    * `name` String, default value for username\n  * `registry` String (for reference, the npm registry is `https://registry.npmjs.org`)\n  * `auth` Object, properties: `otp`\n    the one-time password from a two-factor authentication device.\n  * `opts` Object, [make-fetch-happen options](https://www.npmjs.com/package/make-fetch-happen#extra-options) for setting\n    things like cache, proxy, SSL CA and retry rules.\n\n#### **Promise Value**\n\nAn object with the following properties:\n\n* `token` String, to be used to authenticate further API calls\n* `username` String, the username the user authenticated as\n\n#### **Promise Rejection**\n\nAn error object indicating what went wrong.\n\nThe `headers` property will contain the HTTP headers of the response.\n\nIf the action was denied because an OTP is required then `code` will be set\nto `EOTP`.  This error code can only come from a legacy CouchDB login and so\nthis should be retried with loginCouch.\n\nIf the action was denied because it came from an IP address that this action\non this account isn't allowed from then the `code` will be set to `EAUTHIP`.\n\nOtherwise the code will be `'E'` followed by the HTTP response code, for\nexample a Forbidden response would be `E403`.\n\n### profile.adduserWeb(opener, config) → Promise\n\nTries to create a user new web based login, if that fails it falls back to\nusing the legacy CouchDB APIs.\n\n* `opener` Function (url) → Promise, returns a promise that resolves after a browser has been opened for the user at `url`.\n* `config` Object\n  * `registry` String (for reference, the npm registry is `https://registry.npmjs.org`)\n  * `opts` Object, [make-fetch-happen options](https://www.npmjs.com/package/make-fetch-happen#extra-options) for setting\n    things like cache, proxy, SSL CA and retry rules.\n\n#### **Promise Value**\n\nAn object with the following properties:\n\n* `token` String, to be used to authenticate further API calls\n* `username` String, the username the user authenticated as\n\n#### **Promise Rejection**\n\nAn error object indicating what went wrong.\n\nThe `headers` property will contain the HTTP headers of the response.\n\nIf the registry does not support web-login then an error will be thrown with\nits `code` property set to `ENYI` . You should retry with `adduserCouch`.\nIf you use `adduser` then this fallback will be done automatically.\n\nIf the action was denied because it came from an IP address that this action\non this account isn't allowed from then the `code` will be set to `EAUTHIP`.\n\nOtherwise the code will be `'E'` followed by the HTTP response code, for\nexample a Forbidden response would be `E403`.\n\n### profile.loginWeb(opener, config) → Promise\n\nTries to login using new web based login, if that fails it falls back to\nusing the legacy CouchDB APIs.\n\n* `opener` Function (url) → Promise, returns a promise that resolves after a browser has been opened for the user at `url`.\n* `config` Object\n  * `registry` String (for reference, the npm registry is `https://registry.npmjs.org`)\n  * `opts` Object, [make-fetch-happen options](https://www.npmjs.com/package/make-fetch-happen#extra-options) for setting\n    things like cache, proxy, SSL CA and retry rules.\n\n#### **Promise Value**\n\nAn object with the following properties:\n\n* `token` String, to be used to authenticate further API calls\n* `username` String, the username the user authenticated as\n\n#### **Promise Rejection**\n\nAn error object indicating what went wrong.\n\nThe `headers` property will contain the HTTP headers of the response.\n\nIf the registry does not support web-login then an error will be thrown with\nits `code` property set to `ENYI` . You should retry with `loginCouch`.\nIf you use `login` then this fallback will be done automatically.\n\n\nIf the action was denied because it came from an IP address that this action\non this account isn't allowed from then the `code` will be set to `EAUTHIP`.\n\nOtherwise the code will be `'E'` followed by the HTTP response code, for\nexample a Forbidden response would be `E403`.\n\n### profile.adduserCouch(username, email, password, config) → Promise\n\n```js\nprofile.adduser(username, email, password, {registry}).then(result => {\n  // do something with result.token\n})\n```\n\nCreates a new user on the server along with a fresh bearer token for future\nauthentication as this user.  This is what you see as an `authToken` in an\n`.npmrc`.\n\nIf the user already exists then the npm registry will return an error, but\nthis is registry specific and not guaranteed.\n\n* `username` String\n* `email` String\n* `password` String\n* `config` Object\n  * `registry` String (for reference, the npm registry is `https://registry.npmjs.org`)\n  * `opts` Object, [make-fetch-happen options](https://www.npmjs.com/package/make-fetch-happen#extra-options) for setting\n    things like cache, proxy, SSL CA and retry rules.\n\n#### **Promise Value**\n\nAn object with the following properties:\n\n* `token` String, to be used to authenticate further API calls\n* `username` String, the username the user authenticated as\n\n#### **Promise Rejection**\n\nAn error object indicating what went wrong.\n\nThe `headers` property will contain the HTTP headers of the response.\n\nIf the action was denied because an OTP is required then `code` will be set\nto `EOTP`.\n\nIf the action was denied because it came from an IP address that this action\non this account isn't allowed from then the `code` will be set to `EAUTHIP`.\n\nOtherwise the code will be `'E'` followed by the HTTP response code, for\nexample a Forbidden response would be `E403`.\n\n### profile.loginCouch(username, password, config) → Promise\n\n```js\nprofile.login(username, password, {registry}).catch(err => {\n  if (err.code === 'otp') {\n    return getOTPFromSomewhere().then(otp => {\n      return profile.login(username, password, {registry, auth: {otp}})\n    })\n  }\n}).then(result => {\n  // do something with result.token\n})\n```\n\nLogs you into an existing user.  Does not create the user if they do not\nalready exist.  Logging in means generating a new bearer token for use in\nfuture authentication. This is what you use as an `authToken` in an `.npmrc`.\n \n* `username` String\n* `email` String\n* `password` String\n* `config` Object\n  * `registry` String (for reference, the npm registry is `https://registry.npmjs.org`)\n  * `auth` Object, properties: `otp` — the one-time password from a two-factor\n    authentication device.\n  * `opts` Object, [make-fetch-happen options](https://www.npmjs.com/package/make-fetch-happen#extra-options) for setting\n    things like cache, proxy, SSL CA and retry rules.\n\n#### **Promise Value**\n\nAn object with the following properties:\n\n* `token` String, to be used to authenticate further API calls\n* `username` String, the username the user authenticated as\n\n#### **Promise Rejection**\n\nAn error object indicating what went wrong.\n\nIf the object has a `code` property set to `EOTP` then that indicates that\nthis account must use two-factor authentication to login.  Try again with a\none-time password.\n\nIf the object has a `code` property set to `EAUTHIP` then that indicates that\nthis account is only allowed to login from certain networks and this ip is\nnot on one of those networks.\n\nIf the error was neither of these then the error object will have a\n`code` property set to the HTTP response code and a `headers` property with\nthe HTTP headers in the response.\n\n### profile.get(config) → Promise\n\n```js\nprofile.get(registry, {auth: {token}}).then(userProfile => {\n  // do something with userProfile\n})\n```\n\nFetch profile information for the authenticated user.\n \n* `config` Object\n  * `registry` String (for reference, the npm registry is `https://registry.npmjs.org`)\n  * `auth` Object, properties: `token` — a bearer token returned from\n    `adduser`, `login` or `createToken`, or, `username`, `password` (and\n    optionally `otp`).  Authenticating for this command via a username and\n    password will likely not be supported in the future.\n  * `opts` Object, [make-fetch-happen options](https://www.npmjs.com/package/make-fetch-happen#extra-options) for setting\n    things like cache, proxy, SSL CA and retry rules.\n\n#### **Promise Value**\n\nAn object that looks like this:\n\n```js\n// \"*\" indicates a field that may not always appear\n{\n  tfa: null |\n       false |\n       {\"mode\": \"auth-only\", pending: Boolean} |\n       [\"recovery\", \"codes\"] |\n       \"otpauth://...\",\n  name: String,\n  email: String,\n  email_verified: Boolean,\n  created: Date,\n  updated: Date,\n  cidr_whitelist: null | [\"192.168.1.1/32\", ...],\n  fullname: String, // *\n  homepage: String, // *\n  freenode: String, // *\n  twitter: String,  // *\n  github: String    // *\n}\n```\n\n#### **Promise Rejection**\n\nAn error object indicating what went wrong.\n\nThe `headers` property will contain the HTTP headers of the response.\n\nIf the action was denied because an OTP is required then `code` will be set\nto `EOTP`.\n\nIf the action was denied because it came from an IP address that this action\non this account isn't allowed from then the `code` will be set to `EAUTHIP`.\n\nOtherwise the code will be the HTTP response code.\n\n### profile.set(profileData, config) → Promise\n\n```js\nprofile.set({github: 'great-github-account-name'}, {registry, auth: {token}})\n```\n\nUpdate profile information for the authenticated user.\n\n* `profileData` An object, like that returned from `profile.get`, but see\n  below for caveats relating to `password`, `tfa` and `cidr_whitelist`.\n* `config` Object\n  * `registry` String (for reference, the npm registry is `https://registry.npmjs.org`)\n  * `auth` Object, properties: `token` — a bearer token returned from\n    `adduser`, `login` or `createToken`, or, `username`, `password` (and\n    optionally `otp`).  Authenticating for this command via a username and\n    password will likely not be supported in the future.\n  * `opts` Object, [make-fetch-happen options](https://www.npmjs.com/package/make-fetch-happen#extra-options) for setting\n    things like cache, proxy, SSL CA and retry rules.\n\n#### **SETTING `password`**\n\nThis is used to change your password and is not visible (for obvious\nreasons) through the `get()` API.  The value should be an object with `old`\nand `new` properties, where the former has the user's current password and\nthe latter has the desired new password. For example\n\n```js\nprofile.set({password: {old: 'abc123', new: 'my new (more secure) password'}}, {registry, auth: {token}})\n```\n\n#### **SETTING `cidr_whitelist`**\n\nThe value for this is an Array.  Only valid CIDR ranges are allowed in it.\nBe very careful as it's possible to lock yourself out of your account with\nthis.  This is not currently exposed in `npm` itself.\n\n```js\nprofile.set({cidr_whitelist: [ '8.8.8.8/32' ], {registry, auth: {token}})\n// ↑ only one of google's dns servers can now access this account.\n```\n\n#### **SETTING `tfa`**\n\nEnabling two-factor authentication is a multi-step process.\n\n1. Call `profile.get` and check the status of `tfa`. If `pending` is true then\n   you'll need to disable it with `profile.set({tfa: {password, mode: 'disable'}, …)`.\n2. `profile.set({tfa: {password, mode}}, {registry, auth: {token}})`\n   * Note that the user's `password` is required here in the `tfa` object,\n     regardless of how you're authenticating.\n   * `mode` is either `auth-only` which requires an `otp` when calling `login`\n     or `createToken`, or `mode` is `auth-and-writes` and an `otp` will be\n     required on login, publishing or when granting others access to your\n     modules.\n   * Be aware that this set call may require otp as part of the auth object.\n     If otp is needed it will be indicated through a rejection in the usual\n     way.\n3. If tfa was already enabled then you're just switch modes and a\n   successful response means that you're done.  If the tfa property is empty\n   and tfa _wasn't_ enabled then it means they were in a pending state.\n3. The response will have a `tfa` property set to an `otpauth` URL, as\n   [used by Google Authenticator](https://github.com/google/google-authenticator/wiki/Key-Uri-Format).\n   You will need to show this to the user for them to add to their\n   authenticator application.  This is typically done as a QRCODE, but you\n   can also show the value of the `secret` key in the `otpauth` query string\n   and they can type or copy paste that in.\n4. To complete setting up two factor auth you need to make a second call to\n   `profile.set` with `tfa` set to an array of TWO codes from the user's\n   authenticator, eg: `profile.set(tfa: [otp1, otp2]}, registry, {token})`\n5. On success you'll get a result object with a `tfa` property that has an\n   array of one-time-use recovery codes.  These are used to authenticate\n   later if the second factor is lost and generally should be printed and\n   put somewhere safe.\n\nDisabling two-factor authentication is more straightforward, set the `tfa`\nattribute to an object with a `password` property and a `mode` of `disable`.\n\n```js\nprofile.set({tfa: {password, mode: 'disable'}, {registry, auth: {token}}}\n```\n\n#### **Promise Value**\n\nAn object reflecting the changes you made, see description for `profile.get`.\n\n#### **Promise Rejection**\n\nAn error object indicating what went wrong.\n\nThe `headers` property will contain the HTTP headers of the response.\n\nIf the action was denied because an OTP is required then `code` will be set\nto `EOTP`.\n\nIf the action was denied because it came from an IP address that this action\non this account isn't allowed from then the `code` will be set to `EAUTHIP`.\n\nOtherwise the code will be the HTTP response code.\n\n### profile.listTokens(config) → Promise\n\n```js\nprofile.listTokens(registry, {token}).then(tokens => {\n  // do something with tokens\n})\n```\n\nFetch a list of all of the authentication tokens the authenticated user has.\n\n* `config` Object\n  * `registry` String (for reference, the npm registry is `https://registry.npmjs.org`)\n  * `auth` Object, properties: `token` — a bearer token returned from\n    `adduser`, `login` or `createToken`, or, `username`, `password` (and\n    optionally `otp`).  Authenticating for this command via a username and\n    password will likely not be supported in the future.\n  * `opts` Object, [make-fetch-happen options](https://www.npmjs.com/package/make-fetch-happen#extra-options) for setting\n    things like cache, proxy, SSL CA and retry rules.\n\n#### **Promise Value**\n\nAn array of token objects. Each token object has the following properties:\n\n* key — A sha512 that can be used to remove this token.\n* token — The first six characters of the token UUID.  This should be used\n  by the user to identify which token this is.\n* created — The date and time the token was created\n* readonly — If true, this token can only be used to download private modules. Critically, it CAN NOT be used to publish.\n* cidr_whitelist — An array of CIDR ranges that this token is allowed to be used from.\n\n#### **Promise Rejection**\n\nAn error object indicating what went wrong.\n\nThe `headers` property will contain the HTTP headers of the response.\n\nIf the action was denied because an OTP is required then `code` will be set\nto `EOTP`.\n\nIf the action was denied because it came from an IP address that this action\non this account isn't allowed from then the `code` will be set to `EAUTHIP`.\n\nOtherwise the code will be the HTTP response code.\n\n### profile.removeToken(token|key, config) → Promise\n\n```js\nprofile.removeToken(key, registry, {token}).then(() => {\n  // token is gone!\n})\n```\n\nRemove a specific authentication token.\n\n* `token|key` String, either a complete authentication token or the key returned by `profile.listTokens`.\n* `config` Object\n  * `registry` String (for reference, the npm registry is `https://registry.npmjs.org`)\n  * `auth` Object, properties: `token` — a bearer token returned from\n    `adduser`, `login` or `createToken`, or, `username`, `password` (and\n    optionally `otp`).  Authenticating for this command via a username and\n    password will likely not be supported in the future.\n  * `opts` Object, [make-fetch-happen options](https://www.npmjs.com/package/make-fetch-happen#extra-options) for setting\n    things like cache, proxy, SSL CA and retry rules.\n\n#### **Promise Value**\n\nNo value.\n\n#### **Promise Rejection**\n\nAn error object indicating what went wrong.\n\nThe `headers` property will contain the HTTP headers of the response.\n\nIf the action was denied because an OTP is required then `code` will be set\nto `EOTP`.\n\nIf the action was denied because it came from an IP address that this action\non this account isn't allowed from then the `code` will be set to `EAUTHIP`.\n\nOtherwise the code will be the HTTP response code.\n\n### profile.createToken(password, readonly, cidr_whitelist, config) → Promise\n\n```js\nprofile.createToken(password, readonly, cidr_whitelist, registry, {token, otp}).then(newToken => {\n  // do something with the newToken\n})\n```\n\nCreate a new authentication token, possibly with restrictions.\n\n* `password` String\n* `readonly` Boolean\n* `cidr_whitelist` Array\n* `config` Object\n  * `registry` String (for reference, the npm registry is `https://registry.npmjs.org`)\n  * `auth` Object, properties: `token` — a bearer token returned from\n    `adduser`, `login` or `createToken`, or, `username`, `password` (and\n    optionally `otp`).  Authenticating for this command via a username and\n    password will likely not be supported in the future.\n  * `opts` Object, [make-fetch-happen options](https://www.npmjs.com/package/make-fetch-happen#extra-options) for setting\n    things like cache, proxy, SSL CA and retry rules.\n\n#### **Promise Value**\n\nThe promise will resolve with an object very much like the one's returned by\n`profile.listTokens`.  The only difference is that `token` is not truncated.\n\n```\n{\n  token: String,\n  key: String,    // sha512 hash of the token UUID\n  cidr_whitelist: [String],\n  created: Date,\n  readonly: Boolean\n}\n```\n\n#### **Promise Rejection**\n\nAn error object indicating what went wrong.\n\nThe `headers` property will contain the HTTP headers of the response.\n\nIf the action was denied because an OTP is required then `code` will be set\nto `EOTP`.\n\nIf the action was denied because it came from an IP address that this action\non this account isn't allowed from then the `code` will be set to `EAUTHIP`.\n\nOtherwise the code will be the HTTP response code.\n\n## Logging\n\nThis modules logs by emitting `log` events on the global `process` object.\nThese events look like this:\n\n```\nprocess.emit('log', 'loglevel', 'feature', 'message part 1', 'part 2', 'part 3', 'etc')\n```\n\n`loglevel` can be one of: `error`, `warn`, `notice`, `http`, `timing`, `info`, `verbose`, and `silly`.\n\n`feature` is any brief string that describes the component doing the logging.\n\nThe remaining arguments are evaluated like `console.log` and joined together with spaces.\n\nA real world example of this is:\n\n```\n  process.emit('log', 'http', 'request', '→',conf.method || 'GET', conf.target)\n```\n\nTo handle the log events, you would do something like this:\n\n```\nconst log = require('npmlog')\nprocess.on('log', function (level) {\n  return log[level].apply(log, [].slice.call(arguments, 1))\n})\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/npm/npm-profile.git"
  },
  "version": "3.0.1"
}

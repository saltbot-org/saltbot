{
  "_from": "minipass@^2.0.2",
  "_id": "minipass@2.2.1",
  "_inBundle": false,
  "_integrity": "sha512-u1aUllxPJUI07cOqzR7reGmQxmCqlH88uIIsf6XZFEWgw7gXKpJdR+5R9Y3KEDmWYkdIz9wXZs3C0jOPxejk/Q==",
  "_location": "/npm/tar/minipass",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "minipass",
    "fetchSpec": "^2.0.2",
    "name": "minipass",
    "raw": "minipass@^2.0.2",
    "rawSpec": "^2.0.2",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "/npm/tar",
    "/npm/tar/fs-minipass",
    "/npm/tar/minizlib"
  ],
  "_resolved": "https://registry.npmjs.org/minipass/-/minipass-2.2.1.tgz",
  "_shasum": "5ada97538b1027b4cf7213432428578cb564011f",
  "_shrinkwrap": null,
  "_spec": "minipass@^2.0.2",
  "_where": "/Users/rebecca/code/npm/node_modules/tar",
  "author": {
    "email": "i@izs.me",
    "name": "Isaac Z. Schlueter",
    "url": "http://blog.izs.me/"
  },
  "bugs": {
    "url": "https://github.com/isaacs/minipass/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "yallist": "^3.0.0"
  },
  "deprecated": false,
  "description": "minimal implementation of a PassThrough stream",
  "devDependencies": {
    "end-of-stream": "^1.4.0",
    "tap": "^10.7.0",
    "through2": "^2.0.3"
  },
  "homepage": "https://github.com/isaacs/minipass#readme",
  "keywords": [
    "passthrough",
    "stream"
  ],
  "license": "ISC",
  "main": "index.js",
  "name": "minipass",
  "optionalDependencies": {},
  "readme": "# minipass\n\nA _very_ minimal implementation of a [PassThrough\nstream](https://nodejs.org/api/stream.html#stream_class_stream_passthrough)\n\n[It's very\nfast](https://docs.google.com/spreadsheets/d/1oObKSrVwLX_7Ut4Z6g3fZW-AX1j1-k6w-cDsrkaSbHM/edit#gid=0)\nfor objects, strings, and buffers.\n\nSupports pipe()ing (including multi-pipe() and backpressure\ntransmission), buffering data until either a `data` event handler or\n`pipe()` is added (so you don't lose the first chunk), and most other\ncases where PassThrough is a good idea.\n\nThere is a `read()` method, but it's much more efficient to consume\ndata from this stream via `'data'` events or by calling `pipe()` into\nsome other stream.  Calling `read()` requires the buffer to be\nflattened in some cases, which requires copying memory.  Also,\n`read()` always returns Buffers, even if an `encoding` option is\nspecified.\n\nThere is also no `unpipe()` method.  Once you start piping, there is\nno stopping it!\n\nIf you set `objectMode: true` in the options, then whatever is written\nwill be emitted.  Otherwise, it'll do a minimal amount of Buffer\ncopying to ensure proper Streams semantics when `read(n)` is called.\n\nThis is not a `through` or `through2` stream.  It doesn't transform\nthe data, it just passes it right through.  If you want to transform\nthe data, extend the class, and override the `write()` method.  Once\nyou're done transforming the data however you want, call\n`super.write()` with the transform output.\n\nFor an example of a stream that extends MiniPass to provide transform\ncapabilities, check out [minizlib](http://npm.im/minizlib).\n\n## USAGE\n\n```js\nconst MiniPass = require('minipass')\nconst mp = new MiniPass(options) // optional: { encoding }\nmp.write('foo')\nmp.pipe(someOtherStream)\nmp.end('bar')\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/isaacs/minipass.git"
  },
  "scripts": {
    "postpublish": "git push origin --all; git push origin --tags",
    "postversion": "npm publish",
    "preversion": "npm test",
    "test": "tap test/*.js --100"
  },
  "version": "2.2.1"
}

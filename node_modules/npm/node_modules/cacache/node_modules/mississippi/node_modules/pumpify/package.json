{
  "_from": "pumpify@^1.3.3",
  "_id": "pumpify@1.4.0",
  "_inBundle": false,
  "_integrity": "sha512-2kmNR9ry+Pf45opRVirpNuIFotsxUGLaYqxIwuR77AYrYRMuFCz9eryHBS52L360O+NcR383CL4QYlMKPq4zYA==",
  "_location": "/npm/cacache/mississippi/pumpify",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "pumpify",
    "fetchSpec": "^1.3.3",
    "name": "pumpify",
    "raw": "pumpify@^1.3.3",
    "rawSpec": "^1.3.3",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "/npm/cacache/mississippi"
  ],
  "_resolved": "https://registry.npmjs.org/pumpify/-/pumpify-1.4.0.tgz",
  "_shasum": "80b7c5df7e24153d03f0e7ac8a05a5d068bd07fb",
  "_shrinkwrap": null,
  "_spec": "pumpify@^1.3.3",
  "_where": "/Users/zkat/Documents/code/npm/node_modules/cacache/node_modules/mississippi",
  "author": {
    "name": "Mathias Buus"
  },
  "bugs": {
    "url": "https://github.com/mafintosh/pumpify/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "duplexify": "^3.5.3",
    "inherits": "^2.0.3",
    "pump": "^2.0.0"
  },
  "deprecated": false,
  "description": "Combine an array of streams into a single duplex stream using pump and duplexify",
  "devDependencies": {
    "tape": "^4.8.0",
    "through2": "^2.0.3"
  },
  "homepage": "https://github.com/mafintosh/pumpify",
  "keywords": [
    "combine",
    "duplex",
    "duplexify",
    "pipeline",
    "pump",
    "stream",
    "streams"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "pumpify",
  "optionalDependencies": {},
  "readme": "# pumpify\n\nCombine an array of streams into a single duplex stream using [pump](https://github.com/mafintosh/pump) and [duplexify](https://github.com/mafintosh/duplexify).\nIf one of the streams closes/errors all streams in the pipeline will be destroyed.\n\n```\nnpm install pumpify\n```\n\n[![build status](http://img.shields.io/travis/mafintosh/pumpify.svg?style=flat)](http://travis-ci.org/mafintosh/pumpify)\n\n## Usage\n\nPass the streams you want to pipe together to pumpify `pipeline = pumpify(s1, s2, s3, ...)`.\n`pipeline` is a duplex stream that writes to the first streams and reads from the last one.\nStreams are piped together using [pump](https://github.com/mafintosh/pump) so if one of them closes\nall streams will be destroyed.\n\n``` js\nvar pumpify = require('pumpify')\nvar tar = require('tar-fs')\nvar zlib = require('zlib')\nvar fs = require('fs')\n\nvar untar = pumpify(zlib.createGunzip(), tar.extract('output-folder'))\n// you can also pass an array instead\n// var untar = pumpify([zlib.createGunzip(), tar.extract('output-folder')])\n\nfs.createReadStream('some-gzipped-tarball.tgz').pipe(untar)\n```\n\nIf you are pumping object streams together use `pipeline = pumpify.obj(s1, s2, ...)`.\nCall `pipeline.destroy()` to destroy the pipeline (including the streams passed to pumpify).\n\n### Using `setPipeline(s1, s2, ...)`\n\nSimilar to [duplexify](https://github.com/mafintosh/duplexify) you can also define the pipeline asynchronously using `setPipeline(s1, s2, ...)`\n\n``` js\nvar untar = pumpify()\n\nsetTimeout(function() {\n  // will start draining the input now\n  untar.setPipeline(zlib.createGunzip(), tar.extract('output-folder'))\n}, 1000)\n\nfs.createReadStream('some-gzipped-tarball.tgz').pipe(untar)\n```\n\n## License\n\nMIT\n\n## Related\n\n`pumpify` is part of the [mississippi stream utility collection](https://github.com/maxogden/mississippi) which includes more useful stream modules similar to this one.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/mafintosh/pumpify.git"
  },
  "scripts": {
    "test": "tape test.js"
  },
  "version": "1.4.0"
}

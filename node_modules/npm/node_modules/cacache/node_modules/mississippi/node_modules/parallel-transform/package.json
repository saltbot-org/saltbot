{
  "_from": "parallel-transform@^1.1.0",
  "_id": "parallel-transform@1.1.0",
  "_inBundle": false,
  "_integrity": "sha1-1BDwZbBdojCB/NEPKIVMKb2jOwY=",
  "_location": "/npm/cacache/mississippi/parallel-transform",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "parallel-transform",
    "fetchSpec": "^1.1.0",
    "name": "parallel-transform",
    "raw": "parallel-transform@^1.1.0",
    "rawSpec": "^1.1.0",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "/npm/cacache/mississippi"
  ],
  "_resolved": "https://registry.npmjs.org/parallel-transform/-/parallel-transform-1.1.0.tgz",
  "_shasum": "d410f065b05da23081fcd10f28854c29bda33b06",
  "_shrinkwrap": null,
  "_spec": "parallel-transform@^1.1.0",
  "_where": "/Users/zkat/Documents/code/npm/node_modules/cacache/node_modules/mississippi",
  "author": {
    "email": "mathiasbuus@gmail.com",
    "name": "Mathias Buus Madsen"
  },
  "bugs": {
    "url": "https://github.com/mafintosh/parallel-transform/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "cyclist": "~0.2.2",
    "inherits": "^2.0.3",
    "readable-stream": "^2.1.5"
  },
  "deprecated": false,
  "description": "Transform stream that allows you to run your transforms in parallel without changing the order",
  "devDependencies": {},
  "homepage": "https://github.com/mafintosh/parallel-transform#readme",
  "keywords": [
    "order",
    "parallel",
    "preserve",
    "stream",
    "transform"
  ],
  "license": "MIT",
  "name": "parallel-transform",
  "optionalDependencies": {},
  "readme": "# parallel-transform\n\n[Transform stream](http://nodejs.org/api/stream.html#stream_class_stream_transform_1) for Node.js that allows you to run your transforms\nin parallel without changing the order of the output.\n\n\tnpm install parallel-transform\n\nIt is easy to use\n\n``` js\nvar transform = require('parallel-transform');\n\nvar stream = transform(10, function(data, callback) { // 10 is the parallism level\n\tsetTimeout(function() {\n\t\tcallback(null, data);\n\t}, Math.random() * 1000);\n});\n\nfor (var i = 0; i < 10; i++) {\n\tstream.write(''+i);\n}\nstream.end();\n\nstream.on('data', function(data) {\n\tconsole.log(data); // prints 0,1,2,...\n});\nstream.on('end', function() {\n\tconsole.log('stream has ended');\n});\n```\n\nIf you run the above example you'll notice that it runs in parallel\n(does not take ~1 second between each print) and that the order is preserved\n\n## Stream options\n\nAll transforms are Node 0.10 streams. Per default they are created with the options `{objectMode:true}`.\nIf you want to use your own stream options pass them as the second parameter\n\n``` js\nvar stream = transform(10, {objectMode:false}, function(data, callback) {\n\t// data is now a buffer\n\tcallback(null, data);\n});\n\nfs.createReadStream('filename').pipe(stream).pipe(process.stdout);\n```\n\n### Unordered\nPassing the option `{ordered:false}` will output the data as soon as it's processed by a transform, without waiting to respect the order.\n\n## License\n\nMIT",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/mafintosh/parallel-transform.git"
  },
  "version": "1.1.0"
}
